
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  Admin
  User
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  password      String?
  role          UserRole @default(User)
  image         String?
  accounts      Account[]
  isTwoFactorEnabled    Boolean @default(false)  
  twoFactorConfirmation TwoFactorConfirmation?

  @@map("users")
}

model VerificationToken {
  id         String @id @default(cuid())
  email      String
  token      String @unique
  expires    DateTime
 
  @@unique([email, token])
  @@map("verificationtokens")
}

model PasswordResetToken {
  id         String @id @default(cuid())
  email      String
  token      String @unique
  expires    DateTime
 
  @@unique([email, token])
  @@map("passwordresettokens")
}

model TwoFactorToken {
  id         String @id @default(cuid())
  email      String
  token      String @unique
  expires    DateTime
 
  @@unique([email, token])
  @@map("twofactortokens")
}

model TwoFactorConfirmation {
  id         String @id @default(cuid())
  userId     String
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
  @@map("twofactorconfirmations")
}